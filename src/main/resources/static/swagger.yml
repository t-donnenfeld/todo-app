openapi: 3.0.3
info:
  title: Sample Todo Application for CERN
  description: Sample Todo Application for CERN
  contact:
    email: tdonnenfeld@gmail.com
  version: 1.0.11
servers:
  - url: https://todo.les12.fr
  - url: http://localhost:8080
tags:
  - name: todo
    description: Operations about todos
  - name: categories
    description: Operations about categories
  - name: user
    description: Operations about users
paths:
  /todo:
    get:
      tags:
        - todo
      summary: Get all todos
      description: Get all todos
      operationId: getAllTodo
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - todo
      summary: Add a new todo
      description: Add a new todo
      operationId: addTodo
      security:
        - basicAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/PostOrPutTodoRequest'
      responses:
        '201':
          description: Todo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todo/search:
    post:
      tags:
        - todo
      summary: Finds todos with a search request
      description: Search parameters are given in request body
      operationId: searchTodos
      security:
        - basicAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/AdminSearchTodosRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todo/mine:
    get:
      tags:
        - todo
      summary: Get todos from authenticated user
      description: Get my todos
      operationId: getMyTodos
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todo/mine/search:
    post:
      tags:
        - todo
      summary: Search todos from authenticated user
      description: Get my todos
      operationId: searchMyTodos
      security:
        - basicAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/SearchTodosRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todo/{todoId}:
    get:
      tags:
        - todo
      summary: Find todo by ID
      description: Returns a single todo
      operationId: getTodoById
      security:
        - basicAuth: [ ]
      parameters:
        - name: todoId
          in: path
          description: ID of todo to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - todo
      summary: Update a todo
      description: Update an existing Todo by Id
      operationId: updateTodo
      security:
        - basicAuth: [ ]
      parameters:
        - name: todoId
          in: path
          description: Todo id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/PostOrPutTodoRequest'
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - todo
      summary: Deletes a todo
      description: delete a todo
      operationId: deleteTodo
      security:
        - basicAuth: [ ]
      parameters:
        - name: todoId
          in: path
          description: Todo id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Entry deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedEntryResponse'
        '400':
          description: Invalid todo value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /category:
    get:
      tags:
        - categories
      summary: Get all categories
      description: Get all categories
      operationId: getAllCategory
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - categories
      summary: Add a new category to the list
      description: Add a new category to the list
      operationId: addCategory
      security:
        - basicAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/PostCategoryRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /category/{categoryId}:
    put:
      tags:
        - categories
      summary: Update a category
      description: Update an existing Category by Id
      operationId: updateCategory
      security:
        - basicAuth: [ ]
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/PostCategoryRequest'
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - categories
      summary: Deletes a category
      description: delete a category
      operationId: deleteCategory
      security:
        - basicAuth: [ ]
      parameters:
        - name: categoryId
          in: path
          description: Category id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Entry deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedEntryResponse'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid category value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/register:
    post:
      tags:
        - user
      summary: Create user
      description: Creates a new user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/PostUserRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Todo:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: "Wash the dishes"
        description:
          type: string
          example: "It's been piling up I need to do something..."
        deadline:
          type: string
          format: date-time
          example: "2025-02-04T23:59:59.00Z"
        category:
          $ref: '#/components/schemas/Category'
        owner:
          type: string
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: "Chores"
        description:
          type: string
          example: "Regroups all domestic work related tasks"
    User:
      type: object
      required:
        - username
        - role
      properties:
        id:
          type: integer
          format: int64
          example: 8
        username:
          type: string
          example: tdonnenfeld
        role:
          type: string
          enum:
            - "ADMIN"
            - "USER"
    DeletedEntryResponse:
      type: object
      properties:
        message:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
          enum:
            - "DEFAULT_ERROR"
            - "RESOURCE_NOT_FOUND_ERROR"
            - "VALIDATION_ERROR"
            - "INVALID_USER_OR_PASSWORD"
            - "USER_ALREADY_EXISTS"
            - "RESOURCE_NOT_FOUND"
            - "AUTHORIZATION_DENIED"
  requestBodies:
    PostOrPutTodoRequest:
      description: Todo object that needs to be added
      required: true
      content:
        application/json:
          schema:
            required:
              - name
              - description
            type: object
            properties:
              name:
                type: string
                example: "Wash the dishes"
              description:
                type: string
                example: "It's been piling up I need to do something..."
              deadline:
                type: string
                format: date-time
                example: "2025-02-04T23:59:59.00Z"
              category:
                type: object
                properties:
                  name:
                    type: string
                    example: "Chores"
    PostCategoryRequest:
      description: Category object that needs to be added
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: "Chores"
              description:
                type: string
                example: "Regroups all domestic work related tasks"
    PostUserRequest:
      description: User that need to be created
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
                example: tdonnenfeld
              password:
                type: string
                example: '12345'
    SearchTodosRequest:
      description: Todo search request object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 2
              nameContains:
                type: string
                example: "Wash the dishes"
              descriptionContains:
                type: string
                example: "It's been piling up I need to do something..."
              deadlineAfter:
                type: string
                format: date-time
                example: "2025-02-04T23:59:59.00Z"
              deadlineBefore:
                type: string
                format: date-time
                example: "2025-02-04T23:59:59.00Z"
              categoryIs:
                type: string
                example: "Chore"
                description: Case insensitive category match
    AdminSearchTodosRequest:
      description: Todo search request object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 2
              nameContains:
                type: string
                example: "Wash the dishes"
              descriptionContains:
                type: string
                example: "It's been piling up I need to do something..."
              deadlineAfter:
                type: string
                format: date-time
                example: "2025-02-04T23:59:59.00Z"
              deadlineBefore:
                type: string
                format: date-time
                example: "2025-02-04T23:59:59.00Z"
              categoryIs:
                type: string
                example: "Chore"
              owner:
                type: string
                example: "theo"
